class Solution {
public:
int K;
vector<long long>power;
unordered_map<string,int>mp;
int solve(int i,int jump,int goback)
{
    if(i>K+1)
    {
        return 0;
    }
    string key = to_string(i)+" "+to_string(jump)+" "+tostring(goback);
    if(mp.find(key)!=mp.end())
    {
        return mp[key];
    }
    int ways =0;
    if(i==K)
    {
        ways+=1;
    }
    if(goback==1)
    {
        ways+=solve(i-1,jump,0);   
    }
    ways += solve(i+power[jump],jump+1,1);  
    return mp[key] = ways;
}   
    int waysToReachStair(int k) {
     K = k;
     
     mp.clear();
     power.resize(32);
     for(int i =0;i<=31;i++)
     {
        power[i] = pow(2,i);
     }
     return solve(1,0,1);   
    }
};
