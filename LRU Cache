class LRUCache {
private:
    int capacity;
    unordered_map<int, list<pair<int, int>>::iterator> cache;
    list<pair<int, int>> lru; 

public:
    LRUCache(int capacity) {
        this->capacity = capacity;
    }
    
    int get(int key) {
        if (cache.find(key) != cache.end()) {
            lru.splice(lru.begin(), lru, cache[key]);
            return cache[key]->second;  
        }
        return -1;  
    }
    
    void put(int key, int value) {
        if (cache.find(key) != cache.end()) {
            cache[key]->second = value;
            lru.splice(lru.begin(), lru, cache[key]);
        } else {
            if (lru.size() == capacity) {
                cache.erase(lru.back().first);
                lru.pop_back();
            }
            lru.push_front({key, value});
            cache[key] = lru.begin();  
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
