class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        long long maxSum = 0, currentSum = 0;
        unordered_map<int, int> count;
        int left = 0;

        for (int right = 0; right < nums.size(); ++right) {
            // Add the current element to the window
            count[nums[right]]++;
            currentSum += nums[right];

            while (count[nums[right]] > 1) {
                count[nums[left]]--;
                currentSum -= nums[left];
                left++;
            }

            if (right - left + 1 == k) {
                maxSum = max(maxSum, currentSum);
                count[nums[left]]--;
                currentSum -= nums[left];
                left++;
            }
        }

        return maxSum;
    }
};
