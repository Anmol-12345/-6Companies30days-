class Solution {
public:
    int countPairs(TreeNode* root, int distance) {
        if (!root) return 0;
        
        int pairCount = 0;
        std::vector<int> leftDistances(distance, 0);
        std::vector<int> rightDistances(distance, 0);
        
        calculateDistances(root->left, leftDistances, 0); 
        calculateDistances(root->right, rightDistances, 0); 
        
        for (int i = 0; i < distance; ++i) {
            for (int j = 0; j < distance; ++j) {
                if (i + j + 2 <= distance) { 
                    pairCount += leftDistances[i] * rightDistances[j];
                }
            }
        }
        
        pairCount += countPairs(root->left, distance);
        pairCount += countPairs(root->right, distance);
        
        return pairCount;
    }

    void calculateDistances(TreeNode* node, std::vector<int>& counts, int currentDistance) {
        if (!node || currentDistance >= counts.size()) return;

        if (!node->left && !node->right) { 
            counts[currentDistance]++;
            return;
        }

        calculateDistances(node->left, counts, currentDistance + 1);
        calculateDistances(node->right, counts, currentDistance + 1);
    }
};
