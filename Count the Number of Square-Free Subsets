class Solution {
public:
    int squareFreeSubsets(vector<int>& nums) {
          int primes[10] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};
        int count[31]{};
        //  count array based on input nums
        for (int& x : nums) {
            ++count[x];
        }
        const int numOfPrimes = 10;
        const int mod = 1e9 + 7;

        vector<long long> subsetsState(1 << numOfPrimes);
        subsetsState[0] = 1;
        for (int i = 0; i < count[1]; ++i) {
            subsetsState[0] = subsetsState[0] * 2 % mod;
        }

        for (int x = 2; x < 31; ++x) {
            if (count[x] == 0 || x % 4 == 0 || x % 9 == 0 || x % 25 == 0) {
                continue;
            }

            int mask = 0;
            for (int i = 0; i < numOfPrimes; ++i) {
                if (x % primes[i] == 0) {
                    mask |= 1 << i;
                }
            }

            for (int state = (1 << numOfPrimes) - 1; state; --state) {
                if ((state & mask) == mask) {
                    subsetsState[state] = (subsetsState[state] + 1LL * count[x] * subsetsState[state ^ mask]) % mod;
                }
            }
        }

        long long ans = -1;
        for (auto state : subsetsState) {
            ans = (ans + state) % mod;
        }
      
        return ans;
    }
};
