class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        const int INF = 1e9;
        vector<vector<int>> dist(n, vector<int>(n, INF));

        // Set distance to itself as 0
        for (int i = 0; i < n; i++) {
            dist[i][i] = 0;
        }

        // Populate the adjacency matrix with edge weights
        for (const auto& edge : edges) {
            int u = edge[0], v = edge[1], weight = edge[2];
            dist[u][v] = weight;
            dist[v][u] = weight;
        }

        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (dist[i][k] < INF && dist[k][j] < INF) {
                        dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                    }
                }
            }
        }

       
        int minReachable = n;  
        int resultCity = -1;

        for (int i = 0; i < n; i++) {
            int reachable = 0;

            // Count cities reachable within the distanceThreshold
            for (int j = 0; j < n; j++) {
                if (dist[i][j] <= distanceThreshold) {
                    reachable++;
                }
            }

            // Update the result if this city has fewer reachable cities
            // If tie, choose the city with the larger index
            if (reachable <= minReachable) {
                minReachable = reachable;
                resultCity = i;
            }
        }

        return resultCity;
    }
};
