class Solution {
public:
    long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {
        if (source.size() != target.size()) return -1; 
        
        const int INF = INT_MAX / 2; 
        unordered_map<char, unordered_map<char, int>> costMap;

        for (char c = 'a'; c <= 'z'; ++c) {
            for (char d = 'a'; d <= 'z'; ++d) {
                costMap[c][d] = (c == d) ? 0 : INF; 
            }
        }

        for (int i = 0; i < original.size(); ++i) {
            costMap[original[i]][changed[i]] = min(costMap[original[i]][changed[i]], cost[i]);
        }

        for (char k = 'a'; k <= 'z'; ++k) {
            for (char i = 'a'; i <= 'z'; ++i) {
                for (char j = 'a'; j <= 'z'; ++j) {
                    costMap[i][j] = min(costMap[i][j], costMap[i][k] + costMap[k][j]);
                }
            }
        }

        long long totalCost = 0;

        for (int i = 0; i < source.size(); ++i) {
            char sChar = source[i];
            char tChar = target[i];

            if (sChar == tChar) continue; 

            int conversionCost = costMap[sChar][tChar];

            if (conversionCost == INF) return -1; 
            totalCost += conversionCost;
        }

        return totalCost;
    }        
};
