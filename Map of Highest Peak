
class Solution {
public:
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        int m = isWater.size();
        int n = isWater[0].size();
        
        // Initialize the result grid with -1 for land cells (height not yet assigned)
        vector<vector<int>> result(m, vector<int>(n, -1));
        
        // Directions for 4 possible movements: up, down, left, right
        vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        // Queue for BFS (we will store the coordinates of the water cells)
        queue<pair<int, int>> q;
        
        // Start with all water cells (height = 0)
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (isWater[i][j] == 1) {
                    result[i][j] = 0;  // Water cells have height 0
                    q.push({i, j});
                }
            }
        }
        
        // Perform BFS to propagate heights
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            
            // Explore all 4 directions (up, down, left, right)
            for (auto& dir : directions) {
                int newX = x + dir.first;
                int newY = y + dir.second;
                
                // Check if the new cell is within bounds and hasn't been visited yet
                if (newX >= 0 && newX < m && newY >= 0 && newY < n && result[newX][newY] == -1) {
                    // Assign the height (current height + 1)
                    result[newX][newY] = result[x][y] + 1;
                    q.push({newX, newY});  // Enqueue the newly visited land cell
                }
            }
        }
        
        return result;
    }
};
