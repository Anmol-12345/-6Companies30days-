class Solution {
public:
static bool comp(vector<int>&a,vector<int>&b)
{
    //if w1[0]==w2[0]height ko decresing order mai sort karege...
    if(a[0]==b[0])
    {
        //dec order mai sort karna
        return a[1]>b[1];
    }
    else
    {
        //inc order mai sort karna
        return a[0]<b[0];
    }
}
int solveusingBinarySearch(vector<vector<int>>&envelopes)
{
    sort(envelopes.begin(),envelopes.end(),comp);
    if(envelopes.size()==0)
    {
        return 0;
    }
    vector<int>ans;
    ans.push_back(envelopes[0][1]);
    for(int i =1;i<envelopes.size();i++)
    {
        if(envelopes[i][1]>ans.back())
        {
            ans.push_back(envelopes[i][1]);
        }
        else
        {
            int index = lower_bound(ans.begin(),ans.end(),envelopes[i][1])-ans.begin();
            //here we replace the index
            ans[index] = envelopes[i][1];
        }
    }
    return ans.size();
}
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        int ans  = solveusingBinarySearch(envelopes);
        return ans;
    }
};
