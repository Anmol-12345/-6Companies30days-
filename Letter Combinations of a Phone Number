class Solution {
public:
    vector<string> letterCombinations(string digits) {
        // If digits is empty, return an empty vector
        if (digits.empty()) {
            return {};
        }

        unordered_map<char, string> digitToLetters = {
            {'2', "abc"}, {'3', "def"}, {'4', "ghi"}, {'5', "jkl"},
            {'6', "mno"}, {'7', "pqrs"}, {'8', "tuv"}, {'9', "wxyz"}
        };

        vector<string> result;
        string currentCombination;
        
        backtrack(digits, 0, digitToLetters, currentCombination, result);
        
        return result;
    }
    
private:
    void backtrack(const string& digits, int index, const unordered_map<char, string>& digitToLetters,
                   string& currentCombination, vector<string>& result) {
       
        if (currentCombination.length() == digits.length()) {
            result.push_back(currentCombination);
            return;
        }
        
        char digit = digits[index];
        string letters = digitToLetters.at(digit);
        
        for (char letter : letters) {
            currentCombination.push_back(letter);  // Choose
            backtrack(digits, index + 1, digitToLetters, currentCombination, result);  
            currentCombination.pop_back();  
        }
    }
};
