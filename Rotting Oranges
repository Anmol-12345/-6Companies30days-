class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
             int rows = grid.size();
        int cols = grid[0].size();
        queue<pair<int, int>> q; 
        int freshOranges = 0;

        // Initialize the queue and count fresh oranges
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if (grid[i][j] == 2) {
                    q.push({i, j}); 
                } else if (grid[i][j] == 1) {
                    ++freshOranges; 
                }
            }
        }

        if (freshOranges == 0) return 0; // No fresh oranges to rot

        int minutes = 0;
        vector<pair<int, int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

        // Perform BFS
        while (!q.empty()) {
            int size = q.size();
            bool rottenThisMinute = false;

            for (int i = 0; i < size; ++i) {
                auto [x, y] = q.front();
                q.pop();

                for (auto [dx, dy] : directions) {
                    int nx = x + dx;
                    int ny = y + dy;

                    if (nx >= 0 && ny >= 0 && nx < rows && ny < cols && grid[nx][ny] == 1) {
                        grid[nx][ny] = 2; 
                        q.push({nx, ny});
                        --freshOranges;
                        rottenThisMinute = true;
                    }
                }
            }

            if (rottenThisMinute) ++minutes; // Increment the time if any orange rotted
        }

        return freshOranges == 0 ? minutes : -1;
    }
};
