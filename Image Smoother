class Solution {
public:
    vector<vector<int>> imageSmoother(vector<vector<int>>& img) {
        int rows = img.size();
        int cols = img[0].size();
        vector<vector<int>> result(rows, vector<int>(cols, 0));

        vector<pair<int, int>> directions = {
            {-1, -1}, {-1, 0}, {-1, 1}, // top-left, top, top-right
            { 0, -1}, { 0, 0}, { 0, 1}, // left, center, right
            { 1, -1}, { 1, 0}, { 1, 1}  // bottom-left, bottom, bottom-right
        };

        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                int sum = 0, count = 0;
                    for (auto& dir : directions) {
                    int ni = i + dir.first;
                    int nj = j + dir.second;

                    // Check if the neighbor is within bounds
                    if (ni >= 0 && ni < rows && nj >= 0 && nj < cols) {
                        sum += img[ni][nj];
                        count++;
                    }
                }

                // Set the smoothed value
                result[i][j] = sum / count;
            }
        }

        return result;
    }
};
